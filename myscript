#!/bin/sh


####################
### funktion(en) ###
####################

update() {
	echo "Möchten Sie Update durchführen: \033[1;32mj/n ?\033[0m"
while :
do
  read antwort
  case $antwort in
	j)
		sudo apt-get -y update
		break
		;;
	n)
		echo "Ihre Antwort: \033[1;32mnein\033[0m"
		break
		;;
	*)
		echo "\033[41mSorry, Isch ab nix verstanden, Noma bitte ?!!!\033[0m"
		;;
  esac
done
}

#########################
### tools isntalieren ###
#########################
#apt install git 
#Git konfigurieren
# kann man so machen dass am anfang gefragt wird ob es um eine LINUX oder Ein MAC handelt :
update


#Payton2 instalieren : einfach ausführen lassen : sudo apt install python-minimal
# rausfinden ob Linux 64 oder 32 bin ist : getconf LONG_BIT -> ausgabe : 64 oder 32 -> mit if fangen
# in container -> apt install wget
# if 64 : wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-243.0.0-linux-x86_64.tar.gz
# if 32 : wget https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-243.0.0-linux-x86.tar.gz
# die datei entpacken für  64 bit hier beispiel : tar -xvzf google-cloud-sdk-243.0.0-linux-x86_64.tar.gz
# gcloud (Google-sdk ) instalieren: ./google-cloud-sdk/install.sh (y->y-> return))

# Bis hier gibt es eien Image Nqamens: ubuntu_gck_base

# 

# dann muss gcloud init gemqacht werden, da wird gcloud  initialisiert, in google account angemeldet  und nach Projekt gefraget : ./google-cloud-sdk/bin/gcloud init
# gcloud config set compute/zone .....
# TODO: zone muss in einer Veariabekle gespeichert werden, und die Cluster name


# loggen sie sich ein :gcloud auth login
# gcloud auth application-default login
# instalieren sie kubectl:
#gcloud components install kubectl



update

#########################
### Cluster erstellen ###
#########################

# cluster erstellen: gcloud container clusters create test-cluster (Achten Sie darauf, dass zwei oder mehr GKE-Cluster im selben GCP-Projekt und -Netzwerk ausgeführt werden.)

###############################################
### kubemci-Befehlszeilentool herunterladen ###
###############################################

echo
echo "\t \033[1;36mkubemci-Befehlszeilentool herunterladen"
echo "\t \033[1;36mFuer Linux: \033[1;32m"l" \033[1;36mund fuer MacOS: \033[1;32m"m" \033[1;36meingeben:\033[0m"
# TODO:Überprüfen ob kubemci da ist dann löschen danach herunterladen 
while :
do
  read INPUT_STRING
  case $INPUT_STRING in
	l)
		wget https://storage.googleapis.com/kubemci-release/release/latest/bin/linux/amd64/kubemci
		chmod +x ./kubemci # ausführbar machen
		cp kubemci ./bin #in einer ausführbare pfad kopieren
    	break
		;;
	m)
		wget https://storage.googleapis.com/kubemci-release/release/latest/bin/darwin/amd64/kubemci
		chmod +x ./kubemci
		cp kubemci ./bin
    	break
		;;
	*)
		echo "\033[41mSorry, Isch ab nix verstanden, Noma bitte ?!!!\033[0m"
		;;
  esac
done
echo 
echo "Done!"

# Datei "kubeconfig" erstellen 
# die datei und config und kube ordner kann man in root (~) sehen 

KUBECONFIG=~/mcikubeconfig gcloud container clusters get-credentials --zone=europe-west4-a test-cluster
KUBECONFIG=~/mcikubeconfig gcloud container clusters get-credentials --zone=europe-west4-a test-1-cluster

# NodePort-Dienst für jeden Cluster bereitstellen
# die dateien sollen in verzeuichniss app sein
#mkdir ./app
# die Deployment und die service manifest müssen gepullt werden 


#Mit folgender Schleife können Sie durch alle Cluster iterieren und die Kontexte abrufen, um die Anwendung zusammen mit dem nodePort-Dienst bereitzustellen:
KUBECONFIG=~/mcikubeconfig
for ctx in $(kubectl config get-contexts -o name); do
  kubectl --context="${ctx}" create -f ./app --validate=false
done

##############################Notiz==##########
# die befehle von außen:
#	docker exec -it gcsdk ./google-cloud-sdk/bin/gcloud version
#	docker exec -it gcsdk ./google-cloud-sdk/bin/kubectl
#	docker exec -it gcsdk kubemci

#-v /doesnt/exist:/foo
#docker run -it -v /temp:/temp --name=gcsdk lipad/ubuntu_gcsdk_base bash










